//
// JSONPlaceholderResourceAlbumAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class JSONPlaceholderResourceAlbumAPI {
    /**

     - parameter _id: (path) ID of an album 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func albumsIdGet(_id: Int, completion: @escaping ((_ data: [DemoAlbum]?,_ error: Error?) -> Void)) {
        albumsIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /albums/{id}
     - Returns resultant data related to id provided
     - examples: [{contentType=application/json, example=[ {
  "UserId" : 2,
  "id" : 3,
  "title" : "this is album cover"
}, {
  "UserId" : 2,
  "id" : 3,
  "title" : "this is album cover"
} ]}]
     
     - parameter _id: (path) ID of an album 

     - returns: RequestBuilder<[DemoAlbum]> 
     */
    open class func albumsIdGetWithRequestBuilder(_id: Int) -> RequestBuilder<[DemoAlbum]> {
        var path = "/albums/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[DemoAlbum]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter userId: (query)  
     - parameter _id: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func albumsPost(userId: Int, _id: Int, completion: @escaping ((_ data: [DemoPost]?,_ error: Error?) -> Void)) {
        albumsPostWithRequestBuilder(userId: userId, _id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /albums
     - Adds new item with title and body
     - examples: [{contentType=application/json, example=[ {
  "UserId" : 2,
  "id" : 3,
  "title" : "this is album cover",
  "body" : "Content of album"
}, {
  "UserId" : 2,
  "id" : 3,
  "title" : "this is album cover",
  "body" : "Content of album"
} ]}]
     
     - parameter userId: (query)  
     - parameter _id: (query)  

     - returns: RequestBuilder<[DemoPost]> 
     */
    open class func albumsPostWithRequestBuilder(userId: Int, _id: Int) -> RequestBuilder<[DemoPost]> {
        let path = "/albums"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": userId.encodeToJSON(), 
            "id": _id.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[DemoPost]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
